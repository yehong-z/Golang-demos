// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: test.proto

package test_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloClient interface {
	BasicRPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Many(ctx context.Context, in *Requests, opts ...grpc.CallOption) (*BatchReply, error)
	StreamInput(ctx context.Context, opts ...grpc.CallOption) (Hello_StreamInputClient, error)
	StreamOutput(ctx context.Context, in *Request, opts ...grpc.CallOption) (Hello_StreamOutputClient, error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) BasicRPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/protoc.Hello/BasicRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) Many(ctx context.Context, in *Requests, opts ...grpc.CallOption) (*BatchReply, error) {
	out := new(BatchReply)
	err := c.cc.Invoke(ctx, "/protoc.Hello/Many", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) StreamInput(ctx context.Context, opts ...grpc.CallOption) (Hello_StreamInputClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[0], "/protoc.Hello/StreamInput", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloStreamInputClient{stream}
	return x, nil
}

type Hello_StreamInputClient interface {
	Send(*Request) error
	CloseAndRecv() (*Reply, error)
	grpc.ClientStream
}

type helloStreamInputClient struct {
	grpc.ClientStream
}

func (x *helloStreamInputClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloStreamInputClient) CloseAndRecv() (*Reply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) StreamOutput(ctx context.Context, in *Request, opts ...grpc.CallOption) (Hello_StreamOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[1], "/protoc.Hello/StreamOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloStreamOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hello_StreamOutputClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type helloStreamOutputClient struct {
	grpc.ClientStream
}

func (x *helloStreamOutputClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer is the server API for Hello service.
// All implementations must embed UnimplementedHelloServer
// for forward compatibility
type HelloServer interface {
	BasicRPC(context.Context, *Request) (*Reply, error)
	Many(context.Context, *Requests) (*BatchReply, error)
	StreamInput(Hello_StreamInputServer) error
	StreamOutput(*Request, Hello_StreamOutputServer) error
	mustEmbedUnimplementedHelloServer()
}

// UnimplementedHelloServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (UnimplementedHelloServer) BasicRPC(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasicRPC not implemented")
}
func (UnimplementedHelloServer) Many(context.Context, *Requests) (*BatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Many not implemented")
}
func (UnimplementedHelloServer) StreamInput(Hello_StreamInputServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInput not implemented")
}
func (UnimplementedHelloServer) StreamOutput(*Request, Hello_StreamOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOutput not implemented")
}
func (UnimplementedHelloServer) mustEmbedUnimplementedHelloServer() {}

// UnsafeHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServer will
// result in compilation errors.
type UnsafeHelloServer interface {
	mustEmbedUnimplementedHelloServer()
}

func RegisterHelloServer(s grpc.ServiceRegistrar, srv HelloServer) {
	s.RegisterService(&Hello_ServiceDesc, srv)
}

func _Hello_BasicRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).BasicRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoc.Hello/BasicRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).BasicRPC(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_Many_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Many(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoc.Hello/Many",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Many(ctx, req.(*Requests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_StreamInput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).StreamInput(&helloStreamInputServer{stream})
}

type Hello_StreamInputServer interface {
	SendAndClose(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type helloStreamInputServer struct {
	grpc.ServerStream
}

func (x *helloStreamInputServer) SendAndClose(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloStreamInputServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hello_StreamOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).StreamOutput(m, &helloStreamOutputServer{stream})
}

type Hello_StreamOutputServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type helloStreamOutputServer struct {
	grpc.ServerStream
}

func (x *helloStreamOutputServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

// Hello_ServiceDesc is the grpc.ServiceDesc for Hello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoc.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BasicRPC",
			Handler:    _Hello_BasicRPC_Handler,
		},
		{
			MethodName: "Many",
			Handler:    _Hello_Many_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamInput",
			Handler:       _Hello_StreamInput_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamOutput",
			Handler:       _Hello_StreamOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "test.proto",
}
